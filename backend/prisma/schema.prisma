// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int         @id @default(autoincrement())
  fullName   String
  email      String      @unique
  password   String
  phone      String
  birthday   DateTime
  userType   Int
  Restaurant Restaurant?
  Address    Address[]
  Order      Order[]
  payment    Payment[]

  @@map("users")
}

model Deliverer {
  id             Int     @id @default(autoincrement())
  delyveryMethod String
  photo          String?
  driveLicence   String?
  paymentDetails Payment @relation(fields: [paymentId], references: [id])
  paymentId      Int

  @@map("deliverers")
}

model Restaurant {
  id           Int      @id @default(autoincrement())
  owner        User     @relation(fields: [userId], references: [id])
  userId       Int      @unique
  address      String
  isOpen       Boolean
  workingHours String[]
  orders       Order[]
  name         String
  image        String
  menu         Food[]

  @@map("restaurants")
}

model Food {
  id           Int         @id @default(autoincrement())
  Restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])
  restaurantId Int
  name         String
  ingredients  String
  description  String
  price        Decimal
  OrderFood    OrderFood[]

  @@map("foods")
}

model OrderFood {
  id      Int   @id @default(autoincrement())
  order   Order @relation(fields: [orderId], references: [id])
  orderId Int
  Food    Food? @relation(fields: [foodId], references: [id])
  foodId  Int?

  @@map("order_food")
}

model Address {
  id       Int     @id @default(autoincrement())
  user     User    @relation(fields: [userId], references: [id])
  userId   Int
  street   String
  city     String
  province String
  obs      String
  Order    Order[]

  @@map("addresses")
}

model Payment {
  id         Int         @id @default(autoincrement())
  type       String
  cardNumber String
  name       String
  expiryDate DateTime
  cvv        String
  User       User        @relation(fields: [userId], references: [id])
  userId     Int
  Order      Order[]
  Deliverer  Deliverer[]

  @@map("payments")
}

model Order {
  id           Int         @id @default(autoincrement())
  Restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId Int?
  OrderFood    OrderFood[]
  status       Int         @default(0)
  totalPrice   Decimal
  address      Address     @relation(fields: [addressId], references: [id])
  addressId    Int
  deliverer    User?       @relation(fields: [userId], references: [id])
  userId       Int?
  payment      Payment     @relation(fields: [paymentId], references: [id])
  paymentId    Int

  @@map("orders")
}
